node(1,1,x).
node(1,2,x).
node(1,3,nh).
node(1,4,nh).
node(1,5,1).
node(1,6,x).
node(1,7,1).
node(1,8,nh).
node(2,1,1).
node(2,2,2).
node(2,3,3).
node(2,4,2).
node(2,5,2).
node(2,6,1).
node(2,7,1).
node(2,8,nh).
node(3,1,1).
node(3,2,x).
node(3,3,x).
node(3,4,x).
node(3,5,2).
node(3,6,2).
node(3,7,2).
node(3,8,1).
node(4,1,1).
node(4,2,2).
node(4,3,3).
node(4,4,2).
node(4,5,2).
node(4,6,x).
node(4,7,x).
node(4,8,1).
node(5,1,nh).
node(5,2,nh).
node(5,3,nh).
node(5,4,nh).
node(5,5,1).
node(5,6,2).
node(5,7,3).
node(5,8,2).
node(6,1,1).
node(6,2,1).
node(6,3,1).
node(6,4,nh).
node(6,5,nh).
node(6,6,1).
node(6,7,2).
node(6,8,x).
node(7,1,1).
node(7,2,x).
node(7,3,1).
node(7,4,1).
node(7,5,1).
node(7,6,2).
node(7,7,x).
node(7,8,2).
node(8,1,1).
node(8,2,1).
node(8,3,1).
node(8,4,1).
node(8,5,x).
node(8,6,2).
node(8,7,nh).
node(8,8,nh).
succ(X,Y):-integer(X),Y is X+1.
adjacent(N1,N2):- arg(1,N1,X1),arg(1,N2,X2),arg(2,N1,Y1),arg(2,N2,Y2),arg(3,N1,Z1),arg(3,N2,Z2),node(X1,Y1,Z1),node(X2,Y2,Z2),
((X1==X2,(succ(Y1,Y2);succ(Y2,Y1)));
(succ(X1,X2),(succ(Y1,Y2);succ(Y2,Y1);Y1==Y2));
(succ(X2,X1),(succ(Y1,Y2);succ(Y2,Y1);Y1==Y2))).
%N1 is a non-mine adjacent to mine N2
adjacent_mines(N1,N2):-adjacent(N1,N2),arg(3,N1,Z1),Z1\=x,arg(3,N2,Z),Z==x.
length_list([],0).
length_list([Head|Tail],X):-length_list(Tail,Y),X is Y+1.
%mine(node(X,Y,x)):-adjacent(node(X,Y,x),node(X1,Y1,1)).
member(X,[X|Tail]).
member(X,[Head|Tail]):-member(X,Tail).
adjacent_pos(N1,(X,Y),N2):-arg(1,N1,X1),arg(1,N2,X2),arg(2,N1,Y1),arg(2,N2,Y2),arg(3,N1,Z1),arg(3,N2,Z2),node(X1,Y1,Z1),node(X2,Y2,Z2),X2 is X1+X,Y2 is Y1+Y.
del(X,[X|L],L).
del(X,[H|T],[H|NT]):-del(X,T,NT).
adj_p(Node,[H|List],Node2):-adjacent_pos(Node,H,Node2).
track_neighbours(Node,[],[]).
track_neighbours(Node,[Head|Tail],List):-
    adjacent_pos(Node,Head,node(X,Y,Z)),track_neighbours(Node,Tail,List2),add_to_front(node(X,Y,Z),List2,List).
track_neighbours(Node,[Head|Tail],List):-
    (\+ adjacent_pos(Node,Head,node(X,Y,Z))),track_neighbours(Node,Tail,List).
add_to_front(X,L,[X|L]).
countx([],0).
countx([X|L],N):-arg(3,X,Z),Z==x,countx(L,M),N is M+1.
countx([X|L],N):-arg(3,X,Z),Z\=x,countx(L,N).
getmines([],[]).
getmines([Head|Tail],L):-mine_found(Head),getmines(Tail,L1),add_to_front(Head,L1,L).
getmines([Head|Tail],L):- \+mine_found(Head),getmines(Tail,L).
get_not_mines([],[]).
get_not_mines([Head|Tail],L):-not_mine_found(Head),get_not_mines(Tail,L1),add_to_front(Head,L1,L).
get_not_mines([Head|Tail],L):- \+not_mine_found(Head),get_not_mines(Tail,L).
:- dynamic mine_found/1.
:- dynamic not_mine_found/1.
mine(X):-mine_found(X).
mine(X):- adjacent_mines(node(X1,Y1,Z),X),track_neighbours(node(X1,Y1,Z),[(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)],List),Z\=nh,(countx(List,Z);(countx(List,ListCount),get_not_mines(List,NotMines),length_list(NotMines,Ncount),ListCount is Z+Ncount)),member(X,List),assert(mine_found(X)),listing(mine_found(X)),write(node(X1,Y1,Z)),write(List).
notmine(X):-not_mine_found(X).
notmine(X):-arg(3,X,Z),Z\=x.
notmine(X):- adjacent_mines(node(X1,Y1,Z),X),track_neighbours(node(X1,Y1,Z),[(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)],List),getmines(List,List1), \+member(X,List1),((Z\=nh,length_list(List1,Z));(Z==nh,length_list(List1,0))),assert(not_mine_found(X)),write(node(X1,Y1,Z)),write(List1).

